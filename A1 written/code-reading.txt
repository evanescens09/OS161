##########################################    
#     CSCC69H3 Summer 2012 Assignment 1  #
#     Code Reading Questions             #
#     Kevin Hon Man Chan                 #
#     997385752                          #
#     chanke25                           #
#     kevinhm.chan@mail.utoronto.ca      #
##########################################

1) What functions are used to enable and disable interrupts?
Under kern/arch/mips/thread/cpu.c on line 137, 150, and 164 are the functions cpu_irqon, cpo_irqoff, and cpu_irqonoff, 
respectively that handle enabling and disabling of interrupts.

2) In the virtual memory system you start with (dumbvm), how big is a page, and how many pages does a process get for its user-level stack?
Under kern/arch/mips/vm/dumbvm.c on line 49, a macro defines 12 pages at 4096 bytes per page, as listed in kern/arch/mips/include/vm.h.

3) What function is invoked to make an exact copy of an address space?
Under kern/include/addrspace.h on line 100, the function as_copy is invoked to make an exact copy of an address space.

4) What function is called when a new thread is created? (You will need to find the function definition to fully answer this question.)
Under kern/thread/thread.c on line 479, thread_fork is called, which then calls thread_create on line 486.

5) What error should be generated if the user invokes a system call with an invalid argument?
Under kern/include/kern/errmsg.h on line 50, 'EINVAL' is the error message generated from invoking a system call with invalid argument.

6) What is the syscall number for execv?
Under kern/include/kern/syscall.h on line 52, the syscall number for execv is 2, defined as 'SYS_execv'.

7) Which file contains the machine independent code for the reboot? 
Which file contains the machine dependent code that actually does the reboot?
Under kern/startup/main.c on line 167, sys_reboot is the machine independent code for the reboot.
Under kern/arch/sys161/dev/lamebus_machdep.c on line 22, mainbus_poweroff is the machine dependent code for the reboot.

8) If I change a header file, which of the set of configure and install sequences must be rerun to get an up-to-date executable? 
If a header file is changed, you will need to run 'bmake' and then 'bmake install'.

9) If I add a new header file, which of the set of configure and install sequences do I need to rerun?
If a new header file is added, you will have to reconfigure and recompile: ./configure, bmake depend, bmake and then bmake install

10) How many different subsystems are initialized (bootstrapped) during the boot phase, ignoring pseudoconfig()? List them.
There are 7 different subsystems that are bootstrapped during the boot phase: ram, thread, hardclock, vfs, mainbus, vm, and kprintf.

11) Notice that kprintf is called before kprintf_bootstrap(). What is the purpose of kprintf_bootstrap, and why does it work to call
kprintf before kprintf_bootstrap?
kprintf_bootstrap creates the kprintf lock, which must be called before creating a second thread or enabling a second CPU.
Since we only have one thread/CPU, kprintf will work without calling kprintf_bootstrap.

12) At what point does the output generated by the kprintf statements in the first part of the boot function appear on the screen?
Console output gets buffered up at first and does not appear until mainbus_bootstrap() attaches the console device.

13) Does the menu function run inside the kernel or at user-level?
The menu function runs inside the kernel.

14) Which functions call thread_switch? For each function explain why it calls thread_switch with the first argument that it does.
Under kern/thread/thread.c on line 820, thread_exit calls thread_switch with S_ZOMBIE because the status will be exited but won't be deleted.
Under the same file on line 830, thread_yield calls thread_switch with S_READY because we want the CPU to yield to another process, but stay runnable.
Under the same file on line 1041, wchan_sleep calls thread_swtich with S_SLEEP because we want the CPU to yield to another process, and go to sleep on the specified wait channel.

15) What function is called to handle the "p" menu command? The first function called in handling the "p" menu command is the 
beginning of a chain of function calls that ends with a function that does the work of loading a program to run. List the sequence of functions called until this last function.
The sequence of functions called are: cmd_prog(), common_prog(), thread_fork(), thread_create(), switchframe_init(), thread_startup(), entrypoint(), and finally load_elf().

16) How do you kill a zombie?
Shoot it in the head; or call exorcise() on line 784 in kern/thread/thread.c.

17) What (briefly) is the purpose of userptr_t?
Define userptr_t as a pointer to a one-byte struct, so it won't mix with other pointers.  It points to data at user level.

18) What is the numerical value of the exception code for a MIPS system call?
The numerical value for a MIPS system call is 8, as defined by the macro EX_SYS.

19) How many bytes is an instruction in MIPS? Provide justification.
Under kern/arch/mips/syscall/syscall.c on line 141: 'tf->tf_epc += 4;' which implies that a MIPS instruction is 4 bytes
and the program counter is incremented by 4 each time.

20) How can you test that a system call has actually returned the correct value to the user level?
We can test it by using GDB to print value from kernel mode and compare it with the value from user mode.
